# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

REQUIRED_XCODE_VERSION = "9.3.1"
# Can also use .xcode-version file

default_platform(:ios)

def load_keys
  begin
    import("keys")
  rescue => exception
    UI.error("fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values")
    raise exception
  end
end

def uploadToWordpress(file)
  url = URI.parse('https://www.provenance-emu.com/wp/v2/media')
  filename = File.basename(file)
  File.open(file) do |ipa|
  req = Net::HTTP::Post::Multipart.new url.path,
    "file" => UploadIO.new(ipa, "application/octet-stream", filename)
  res = Net::HTTP.start(url.host, url.port) do |http|
    http.request(req)
    end
  end
end

platform :ios do
  # before_all do
  #   git_pull(only_tags: true)
  # end
  #
  # after_all do
  #   push_git_tags
  # end

  private_lane :verify_xcode_version do
    ensure_xcode_version(version: REQUIRED_XCODE_VERSION)
  end

  desc "Build and run tests"
  lane :test do
    scan
  end

  desc "Travis Test"
  lane :travistest do
    setup_travis
    beta
  end

  desc "Users create their own build"
  lane :userbuild do
    UI.message "Neutral message (usually white)"
    UI.success "Successfully finished processing (usually green)"
    UI.error "Wahaha, what's going on here! (usually red)"
    UI.important "Make sure to use Windows (usually yellow)"

    UI.header "Inputs" # a big box

    name = UI.input("What's your name? ")
    if UI.confirm("Are you '#{name}'?")
      UI.success "Oh yeah"
    else
      UI.error "Wups, invalid"
    end

    UI.password("Your password please: ") # password inputs are hidden

    ###### A "Dropdown" for the user
    project = UI.select("Select your project: ", ["Test Project", "Test Workspace"])

    UI.success("Okay #{name}, you selected '#{project}'")

    ###### To run a command use
    FastlaneCore::CommandExecutor.execute(command: "ls",
                                        print_all: true,
                                            error: proc do |error_output|
                                              # handle error here
                                            end)

    ###### or if you just want to receive a simple value use this only if the command doesn't take long
    diff = Helper.backticks("git diff")

    ###### fastlane "crash" because of a user error everything that is caused by the user and is not unexpected
    UI.user_error!("You don't have a project in the current directory")

    ###### an actual crash when something unexpected happened
    UI.crash!("Network timeout")

    ###### a deprecation message
    UI.deprecated("The '--key' parameter is deprecated")
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    #get_certificates           # invokes cert
    #get_provisioning_profile   # invokes sigh

    # Git git commit count
    build_number = number_of_commits()

    # -- Update bundle names and ids
    # - iOS
    update_info_plist(
      xcodeproj: 'Provenance.xcodeproj',
      scheme: 'Provenance', # Scheme really means target
      display_name: 'Prov Beta',
      app_identifier: 'com.provenance-emu.provenance-jm',
    )
    update_app_identifier(
      xcodeproj: "Provenance.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: "Provenance/Provenance-Info.plist", # Path to info plist file, relative to xcodeproj
      app_identifier: "com.provenance-emu.provenance-jm" # The App Identifier
    )

    # - Spotlight
    update_info_plist(
      xcodeproj: 'Provenance.xcodeproj',
      scheme: 'Spotlight',
      app_identifier: 'com.provenance-emu.provenance-jm.Spotlight',
    )
    update_app_identifier(
      xcodeproj: "Provenance.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: "Spotlight/Info.plist", # Path to info plist file, relative to xcodeproj
      app_identifier: "com.provenance-emu.provenance-jm.Spotlight" # The App Identifier
    )

    # - tvOS
    # Use the same bundle ID as iOS so it's 'universal install'
    update_info_plist(
      xcodeproj: 'Provenance.xcodeproj',
      scheme: 'ProvenanceTV',
      display_name: 'Prov Beta',
      app_identifier: 'com.provenance-emu.provenance-jm',
    )
    update_app_identifier(
      xcodeproj: "Provenance.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: "ProvenanceTV/Info.plist", # Path to info plist file, relative to xcodeproj
      app_identifier: "com.provenance-emu.provenance-jm" # The App Identifier
    )


    # - Top Shelf
    update_info_plist(
      app_identifier: 'com.provenance-emu.provenance-jm.topshelf',
      xcodeproj: 'Provenance.xcodeproj',
      scheme: 'TopShelf',
    )
    update_app_identifier(
      xcodeproj: "Provenance.xcodeproj", # Optional path to xcodeproj, will use the first .xcodeproj if not set
      plist_path: "TopShelf/Info.plist", # Path to info plist file, relative to xcodeproj
      app_identifier: "com.provenance-emu.provenance-jm.topshelf" # The App Identifier
    )

    # Clean the dir for git
    # ensure_git_status_clean
    # ensure_git_in_sync
    # certificates # Download the certs?
    sync_code_signing

    # temporarily disable automatic code signing
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    disable_automatic_code_signing(path: "Provenance.xcodeproj",
      targets: ["Provenance"],
      code_sign_identity: "iPhone Distribution",
      profile_name: "match AdHoc com.provenance-emu.provenance-jm",
      bundle_identifier: "com.provenance-emu.provenance-jm",
      use_automatic_signing: false,
      team_id: team_id)

    disable_automatic_code_signing(path: "Provenance.xcodeproj",
      targets: ["Spotlight"],
      code_sign_identity: "iPhone Distribution",
      profile_name: "match AdHoc com.provenance-emu.provenance-jm.Spotlight",
      bundle_identifier: "com.provenance-emu.provenance-jm.Spotlight",
      use_automatic_signing: false,
      team_id: team_id)


    carthage(
      command: "bootstrap",
      use_binaries: false,
      cache_builds: true,
      platform: "iOS",
      project_directory: "PVSupport"
    )

    carthage(
      command: "build",
      use_binaries: false,
      cache_builds: true,
      platform: "iOS",
      project_directory: "PVSupport"
    )

    # Codesign
    # Types, appstore adhoc development enterprise
    match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.Spotlight"], type: "adhoc", platform: "ios")
    # update_project_provisioning(
    #   xcodeproj: "Project.xcodeproj",
    #   profile: "./watch_app_store.mobileprovision", # optional if you use sigh
    #   target_filter: ".*WatchKit Extension.*", # matches name or type of a target
    #   build_configuration: "Release",
    #   code_signing_identity: "iPhone Development" # optionally specify the codesigning identity
    # )

        # Build iOS App
    ipa_name = "Provenace-#{git_branch}-#{build_number}.ipa"
    buid_ios_adhoc(ipa_name: ipa_name)
      # export_xcargs: "-allowProvisioningUpdates", don't use for CI, needs xcode account setup

    # uploadToWordpress("./build/#{ipa_name}")
    # upload_to_testflight

    # Build tvOS app
    # match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.topshelf"], type: "adhoc", platform: "tvos")
    # carthage(
    #   command: "bootstrap",
    #   platform: "tvOS",
    #   project_directory: "PVSupport"
    # )
    # carthage(
    #   command: "build",
    #   use_binaries: false,
    #   cache_builds: true,
    #   platform: "tvOS",
    #   project_directory: "PVSupport"
    # )
    # ipa_name = "ProvenaceTV-#{git_branch}-#{build_number}.ipa"
    # build_app(workspace: "Provenance.xcworkspace", scheme: "ProvenanceTV-Release", output_name: ipa_name, include_bitcode: false)


    enable_automatic_code_signing(path: "Provenance.xcodeproj")

    # uploadToWordpress("./build/#{ipa_name}")
    #user = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
    # keychain_entry = CredentialsManager::AccountManager.new(user: user)
    # password = keychain_entry.password
    # scp(
    #   username: ENV["FASTLANE_USER"],
    #   password: ENV["FASTLANE_PASSWORD"],
    #   host: "provenance.joemattello.com",
    #    upload: {
    #     src: ipa_name,
    #     dst: "/usr/share/nginx/provenance.joemattiello.com/builds/" + git_branch + "/"
    #   }
    # )

    # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts
  end

  desc "Setup Certs for Match - New Devs"
  lane :certificates do
    setup_certificates_private(type: "development")
    setup_certificates_private(type: "adhoc")
    # setup_certificates_private(type: "appstore")
  end

  private_lane :setup_certificates_private do |options|
    # types "appstore", "development", "adhoc", "enterprise"
    type = options[:type]
    match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.Spotlight"], type: type, readonly: true, platform: "ios")
    match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.topshelf"], type: type, readonly: true, platform: "tvos")
  end

  desc "Create Certs for Match"
  lane :create_certificates do
    create_certificates_private(type: "development")
    create_certificates_private(type: "adhoc")
    create_certificates_private(type: "appstore")
    #create_certificates_private(type: "enterprise")
  end

  private_lane :create_certificates_private do |options|
    # types "appstore", "development", "adhoc", "enterprise"
    type = options[:type]
    match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.Spotlight"], type: type, readonly: false, platform: "ios")
    match(app_identifier: ["com.provenance-emu.provenance-jm", "com.provenance-emu.provenance-jm.topshelf"], type: type, readonly: false, platform: "tvos")
  end

  desc "Update device list"
  lane :update_devices do
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    register_devices(devices_file: 'fastlane/devices.txt', team_id:team_id)
    match(type: "adhoc", force_for_new_devices: true)
  end

  desc "Clear your DerivedData"
  lane :derived_data do
    clear_derived_data
  end

  private_lane :buid_ios_adhoc do |options|
    ipa_name = options.fetch(:ipa_name, 'Provenance.ipa')
    build_app(
      workspace: "Provenance.xcworkspace",
      scheme: "Provenance-Travis",
      export_method: "ad-hoc", # Method used to export the archive. Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
      configuration: "Travis",
      # codesigning_identity: "iPhone Developer",#{}"Joe Mattiello", "iPhone Distribution"
      clean: false,
      output_directory: " build/adhoc",
      output_name: ipa_name,
      include_bitcode: false,
      include_symbols:true,
      #xcargs: "PROVISIONING_PROFILE_SPECIFIER='match Development com.provenance-emu.provenance-jm'",
      # export_options: {
      #   method: "ad-hoc",
      #   manifest: {
      #     appURL: "https://www.provenance-emu.com/builds/#{ipa_name}",
      #   },
      #   provisioningProfiles: {
      #     "com.provenance-emu.provenance-jm" => "match AdHoc com.provenance-emu.provenance-jm", # match AdHoc match AppStore match Development
      #     "com.provenance-emu.provenance-jm.Spotlight" => "match AdHoc com.provenance-emu.provenance-jm.Spotlight"
      #   }
      # }
    )

    # Send to hockey app
    # NOTE: hockey action will use the latest ipa and latest dsym built
    # hockey(
    #    api_token: ENV['HOCKEY_APP_TOKEN'],
    #    notes: "The Official QuizUp Beta",
    #    public_identifier: ENV['HOCKEY_BETA_APP_ID'],
    #    notify: false)
  end

  # private_lane :versionIcon do
  #   # see https://github.com/revolter/fastlane-plugin-icon_versioning
  #   # https://github.com/HazAT/fastlane-plugin-badge
  # https://github.com/HazAT/badge
  # end

  # See https://www.raywenderlich.com/136168/fastlane-tutorial-getting-started-2
  # https://docs.fastlane.tools/getting-started/ios/screenshots/
  # desc "Take screenshots"
  # lane :screenshot do
  #   snapshot
  # end

  # Lane to run carthage commands easily
  # lane :carthage do |options|
  #   verify_xcode_version
  #
  #   carthage(
  #     command: options[:build] ? "build" : "bootstrap",
  #     platform: options[:tvOS] ? "tvOS" : "iOS",
  #     use_binaries: false,
  #     cache_builds: true,
  #     project_directory: options[:support] ? "PVSupport" : "./"
  #   )
  # end

# See https://docs.fastlane.tools/actions/resign/
#   lane :resign do
#     resign(
#   ipa: "path/to/ipa", # can omit if using the `ipa` action
#   signing_identity: "iPhone Distribution: Luka Mirosevic (0123456789)",
#   provisioning_profile: {
#     "com.example.awesome-app" => "path/to/profile",
#     "com.example.awesome-app.app-extension" => "path/to/app-extension/profile"
#   }
# )
#   end

# lane :hockey do
  #token 6f0fc66f062044349a25aaeede834921 app id a1fd56cd852d4c959988484eba69f724 secret f5093f18984251498a3751f5e05440f9
# end

  # error block is executed when a error occurs
  # error do |lane, exception|
  #   slack(
  #     # message with short human friendly message
  #     message: exception.to_s,
  #     success: false,
  #     # Output containing extended log output
  #     payload: { "Output" => exception.error_info.to_s }
  #   )
  # end
end
